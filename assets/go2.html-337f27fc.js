import{_ as e,o as d,c as a,a as t}from"./app-b1fe8d4e.js";const i={},n=t(`<h2 id="声明与赋值" tabindex="-1"><a class="header-anchor" href="#声明与赋值" aria-hidden="true">#</a> 声明与赋值</h2><h3 id="变量的声明与赋值" tabindex="-1"><a class="header-anchor" href="#变量的声明与赋值" aria-hidden="true">#</a> 变量的声明与赋值</h3><p>在 <code>Go</code> 中, 变量的声明格式一般为:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var name type
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中,<code>var</code> 是声明变量的关键字, 固定不变, <code>name</code> 是变量名, <code>type</code> 是该变量所属的数据类型。<br> 和大多数语言一样, 使用 <code>=</code> 进行赋值。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var number int
number = 100
// 或合并写
var number int = 100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常量的声明与赋值" tabindex="-1"><a class="header-anchor" href="#常量的声明与赋值" aria-hidden="true">#</a> 常量的声明与赋值</h3><p>常量声明和赋值的格式为:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const name type = value
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中, <code>const</code> 是声明常量的关键字, 固定不变, <code>name</code> 是变量名, <code>type</code> 是该变量所属的数据类型, <code>value</code> 是常量的值。<br> 声明常量时, 必须为其赋值。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const number int = 100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="批量声明与赋值" tabindex="-1"><a class="header-anchor" href="#批量声明与赋值" aria-hidden="true">#</a> 批量声明与赋值</h3><p>为了方便多个变量、常量的声明与赋值, 我们口语批量处理他们:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 变量
var (
  number int = 100
  text = &quot;hello&quot;
  name string
)

// 常量
const (
  PI float64 = 3.14
  WIDTH = 5
  HEIGHT = 10
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="go-语言的类型推断" tabindex="-1"><a class="header-anchor" href="#go-语言的类型推断" aria-hidden="true">#</a> Go 语言的类型推断</h2><p>如果数据类型为 Go语言内置的基础类型, 则可以无需指定类型, Go语言会自动进行类型推断。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var number = 100
const PI = 3.14
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>number</code> 的值为 100, Go语言会推断出他的类型为整数型, 同理, <code>PI</code> 的类型为浮点型。<br> 对于变量, 还有一种极为精简的声明与赋值方式:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>number := 100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>:=</code> 的作用是声明和赋值, 如果是已经声明过的变量, 无法直接使用 <code>:=</code></p><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h2><h3 id="整数型" tabindex="-1"><a class="header-anchor" href="#整数型" aria-hidden="true">#</a> 整数型</h3><table><thead><tr><th>类型</th><th>精度</th></tr></thead><tbody><tr><td>uint8</td><td>无符号8位整数(0到2^8-1)</td></tr><tr><td>uint16</td><td>无符号16位整数(2^16-1)</td></tr><tr><td>uint32</td><td>无符号32位整数(0到2^32-1)</td></tr><tr><td>uint64</td><td>无符号64位整数(0到2^64-1)</td></tr><tr><td>int8</td><td>有符号8位整数(-2^7到2^7-1)</td></tr><tr><td>int16</td><td>有符号16位整数(-2^15到2^15-1)</td></tr><tr><td>int32</td><td>有符号32位整数(-2^31到2^31-1)</td></tr><tr><td>int64</td><td>有符号64位整数(-2^63到2^63-1)</td></tr></tbody></table><h3 id="浮点型" tabindex="-1"><a class="header-anchor" href="#浮点型" aria-hidden="true">#</a> 浮点型</h3><table><thead><tr><th>类型</th><th>精度</th></tr></thead><tbody><tr><td>float32</td><td>the set of all IEEE-754 32-bit floating-point numbers</td></tr><tr><td>float64</td><td>the set of all IEEE-754 64-bit floating-point numbers</td></tr></tbody></table><h3 id="复数型" tabindex="-1"><a class="header-anchor" href="#复数型" aria-hidden="true">#</a> 复数型</h3><table><thead><tr><th>类型</th><th>精度</th></tr></thead><tbody><tr><td>complex64</td><td>含 float32 实数和 float32 虚数</td></tr><tr><td>complex128</td><td>含 float64 实数和 float64 虚数</td></tr></tbody></table><h3 id="布尔型" tabindex="-1"><a class="header-anchor" href="#布尔型" aria-hidden="true">#</a> 布尔型</h3><table><thead><tr><th>类型</th><th>精度</th></tr></thead><tbody><tr><td>bool</td><td>true或false</td></tr></tbody></table><h3 id="字符串型" tabindex="-1"><a class="header-anchor" href="#字符串型" aria-hidden="true">#</a> 字符串型</h3><table><thead><tr><th>类型</th><th>精度</th></tr></thead><tbody><tr><td>string</td><td>UTF-8 编码表示的 Unicode</td></tr></tbody></table><h2 id="指针类型" tabindex="-1"><a class="header-anchor" href="#指针类型" aria-hidden="true">#</a> 指针类型</h2><h3 id="类型指针" tabindex="-1"><a class="header-anchor" href="#类型指针" aria-hidden="true">#</a> 类型指针</h3><p>在传递数据时直接使用指针可以避免创建数据的副本, 借阅内存开销。类型指针不能进行偏移和运算, 可以避免非法修改为其他数据的风险, 也更有利于垃圾回收机制找到并回收他们。使用 <code>&amp;</code> 运算符, 获取变量的内存地址。</p><h3 id="切片指针" tabindex="-1"><a class="header-anchor" href="#切片指针" aria-hidden="true">#</a> 切片指针</h3><p>切片由指向起始元素的指针、元素数量和总容量构成。当访问切片发生越界时, 会发生宕机并输出堆栈信息。宕机是可以恢复的, 而崩溃只能导致程序停止运行。使用 <code>*</code> 运算符, 获取该内存地址实际对应的值。</p><h3 id="new" tabindex="-1"><a class="header-anchor" href="#new" aria-hidden="true">#</a> new()</h3><p>我们还可以使用 new() 函数直接创建指针变量, 相当于在内存中创建了没有变量名的某种类型的变量。<br> 常用在无需变量名或必须传递指针变量值的场景中。<br> 使用格式如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>new(type)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>代码示例:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ptr := new(int64) // 地址

*ptr = 100        // 为该地址的内存
fmt.Println(*ptr) // 输出 100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符与优先级" tabindex="-1"><a class="header-anchor" href="#运算符与优先级" aria-hidden="true">#</a> 运算符与优先级</h2><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h3><p>go 的算数运算符与其他语言一致, 分别有 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>++</code>、<code>--</code>。</p><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h3><p>关系运算符用来判断两者的关系, 结果与判断条件一致时, 返回 <code>true</code>, 不一致时, 返回 <code>false</code>。分别有 <code>&gt;</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>==</code>、<code>!=</code>。</p><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><p>逻辑运算符通常用来将两个条件组合, 获得组合后的关系, 最终将输出布尔类型值。分别有 <code>&amp;&amp;</code>、<code>||</code>、<code>!</code> 表示 <code>与</code>、<code>或</code>、<code>非</code>。</p><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h3><p>在使用位运算符进行整数型变量运算时, 会将其他进制数值转换成二进制数值, 然后采用二进制数值的方式进行运算, 并返回原始进制类型的计算结果。<br> 分别有 <code>&amp;</code> <code>|</code> <code>^</code> <code>&lt;&lt;</code> <code>&gt;&gt;</code>, 表示 <code>与</code>、<code>或</code>、<code>异或</code>、<code>左移</code>、<code>右移</code>。</p><h3 id="指针运算符" tabindex="-1"><a class="header-anchor" href="#指针运算符" aria-hidden="true">#</a> 指针运算符</h3><p>分别有 <code>&amp;</code> 和 <code>*</code>, 详见前文指针类型部分。</p><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><p>在部分场景中, 我们需要对数据类型进行转换才能进行后续逻辑, 在Go语言中, 进行类型转换有两个需要注意的地方:</p><ol><li>只能进行相同类别的转换, 进行不同类别的转换将会引发编译时的错误。</li><li>若将取值较大的类型转换为取值范围较小的类型, 且实际值超过取值范围较小的类型时将会发生精度丢失的情况。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var a int = 1
var b float64 = 1.2
a = int(b)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56),r=[n];function c(o,s){return d(),a("div",null,r)}const h=e(i,[["render",c],["__file","go2.html.vue"]]);export{h as default};
